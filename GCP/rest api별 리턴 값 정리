Stackdriver와 cloud watch의 차이점

목록 링크 : https://cloud.google.com/docs/compare/aws/monitoring

scope는 공통적으로 cloud-platform, monitoring만 추가해주면 됨

인스턴스의 세부 리소스 사용량을 보고 싶다면 인스턴스에 stack driver agent를 설치해야 함

agent 설치 후 dashboard 의 share 항목을 통해 편하게 관제 iframe 도표를 얻어올 수 있다.
* 단! 고정 사용자로 설정되므로 사용자에 따라 차트가 변하지 않는다....

gcp는 모니터링 대쉬보드의 생성과 제거, 세부 옵션 설정은 프로그래밍 가능하도록 실패하였으나

매트릭의 세부 파라미터 불러오기는 지원하지 않는 듯 하다....

stackdriver rest api 리스트별 특징

목록 링크 : https://cloud.google.com/monitoring/api/ref_v3/rest/

REST Resource: v3.projects.alertPolicies -> 경고 정책 설정
REST Resource: v3.projects.groups -> 그룹 관리
REST Resource: v3.projects.groups.members -> 그룹 멤버 관리
REST Resource: v3.projects.metricDescriptors -> 전체 dashbord(metric) 관리, 값 불러오기 불가능, 메트릭 metadata만 설정 가능
                                                                  DB로 따지면 스키마 관리
REST Resource: v3.projects.monitoredResourceDescriptors -> 세부 dashboard 관리, 위의 경우 전체 리스트를 관리한다면 resourceDescriptors는
                                                            개별 속성 관리, 즉 데이터를 얻어올 수 있지는 않다.
REST Resource: v3.projects.notificationChannelDescriptors
REST Resource: v3.projects.notificationChannels
REST Resource: v3.projects.timeSeries
REST Resource: v3.projects.uptimeCheckConfigs
REST Resource: v3.services -> 별도의 서비스? 무슨 서비스를 의미하는지 모르겠으나 return 값이 dashboard 관련은 아니었음
REST Resource: v3.services.serviceLevelObjectives -> 상기 내용과 동일
REST Resource: v3.uptimeCheckIps

가장 연관성이 커 보이는 api들 테스트 진행
v3.projects.metricDescriptors
v3.projects.monitoredResourceDescriptors
v3.services


먼저 v3.projects.metricDescriptors

api test 링크 :
https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.metricDescriptors/list
전달 파라미터 : projects/{project_id_or_number} -> projects/bosh-261115

모든 매트릭의 메타데이터 리스트를 불러온다.
Mbyte 단위 데이터, doc에서 예시로 보여주는 대량의 리소스 데이터가 이것이다.

https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.metricDescriptors/get

전달 파라미터 :
projects/bosh-261115/metricDescriptors/compute.googleapis.com/instance/cpu/utilization

// disk 바이트 단위 읽기 항목 (생략)
projects/bosh-261115/metricDescriptors/compute.googleapis.com/instance/disk/read_bytes_count

CPU 사용량 metricDescriptors get 옵션을 요청할 경우
다음 json 객체를 리턴받는다. 해당 객체는 dashboard의 측정 값이 아닌 속성 값을 가지고 있다.

{
  "name": "projects/bosh-261115/metricDescriptors/compute.googleapis.com/instance/cpu/utilization",
  "labels": [
    {
      "key": "instance_name",
      "description": "The name of the VM instance."
    }
  ],
  "metricKind": "GAUGE",
  "valueType": "DOUBLE",
  "unit": "10^2.%",
  "description": "Fractional utilization of allocated CPU on this instance. Values are typically numbers between 0.0 and 1.0 (but some machine types allow bursting above 1.0). Charts display the values as a percentage between 0% and 100% (or more). This metric is reported by the hypervisor for the VM and can differ from `agent.googleapis.com/cpu/utilization`, which is reported from inside the VM.",
  "displayName": "CPU utilization",
  "type": "compute.googleapis.com/instance/cpu/utilization",
  "metadata": {
    "launchStage": "GA",
    "samplePeriod": "60s",
    "ingestDelay": "240s"
  },
  "launchStage": "GA",
  "monitoredResourceTypes": [
    "gce_instance"
  ]
}


v3.projects.monitoredResourceDescriptors

list api test 링크 :
https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.monitoredResourceDescriptors/list?apix_params=%7B%22name%22%3A%22projects%2Fbosh-261115%22%7D

list 옵션 전달 파라미터 :
projects/bosh-261115

모니터 대상 메트릭의 리소스 설명이 담긴 객체 리스트를 반환함 (필드와 필드에 대한 설명으로 구성, 측정 값 없음)

get api test 링크 :
https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.monitoredResourceDescriptors/get

get 옵션 전달 파라미터 :
projects/bosh-261115/monitoredResourceDescriptors/gce_instance

list에서 반환한 객체중 gce_instance 타입이 갖는 데이터 필드와 설명이 담긴 객체 반환
{
  "type": "gce_instance",
  "displayName": "GCE VM Instance",
  "description": "A virtual machine instance hosted in Google Compute Engine (GCE).",
  "labels": [
    {
      "key": "project_id",
      "description": "The identifier of the GCP project associated with this resource, such as \"my-project\"."
    },
    {
      "key": "instance_id",
      "description": "The numeric VM instance identifier assigned by Compute Engine."
    },
    {
      "key": "zone",
      "description": "The Compute Engine zone in which the VM is running."
    }
  ],
  "name": "projects/bosh-261115/monitoredResourceDescriptors/gce_instance"
}


v3.services




netdata를 이용한 방법은??
https://www.deok.me/entry/%EC%8B%A4%EC%8B%9C%EA%B0%84-%EC%84%9C%EB%B2%84-%EB%AA%A8%EB%8B%88%ED%84%B0%EB%A7%81-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8-NetData-%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%98%EC%97%AC-%EC%84%9C%EB%B9%84%EC%8A%A4%EB%A5%BC-%EB%AA%A8%EB%8B%88%ED%84%B0%EB%A7%81-%ED%95%B4%EB%B3%B4%EC%9E%90
bash <(curl -Ss https://my-netdata.io/kickstart.sh)
String ip_add = applicationProperties.getGcp().getIp_add();
resultMap.put("ip_add", ip_add);

NetData GPL v3

상업적 이용 가능
내부 사용 시 코드 미공개 가능
라이센스 추가 설명 : https://aroundck.tistory.com/887
조건표 : http://www.bloter.net/archives/209318

Netdata 테스트 환경
GCP -> micro, ubuntu

지원 운영체제
[Debian / Ubuntu]
apt-get install zlib1g-dev gcc make git autoconf autogen automake pkg-config

[Centos / Fedora / Redhat / Sulinux]
yum install zlib-devel gcc make git autoconf autogen automake pkgconfig

리눅스 포털 설치 가이드 참조
https://www.linux.co.kr/home2/board/subbs/board.php?bo_table=lecture&wr_id=1869&sca=1

공식 도큐먼트 데비안 설치
https://docs.netdata.cloud/packaging/installer/

GCP 메인 대시보드의 CPU사용량과 실제 인스턴스 CPU사용량은 다르다.
https://serverfault.com/questions/952703/monitoring-reports-incorrect-cpu-usage-on-gcp

``
ip 값 자동획득
 -> 리소스 값을 통해 획득이 가능할 것 같다.
 get Instance network INFO [{id=3455538011992795450, creationTimestamp=2020-01-13T17:22:30.283-08:00, name=starlabs, description=, tags={items=[http-server, https-server], fingerprint=6smc4R4d39I=}, machineType=https://www.googleapis.com/compute/v1/projects/bosh-261115/zones/asia-northeast1-b/machineTypes/f1-micro, status=RUNNING, zone=https://www.googleapis.com/compute/v1/projects/bosh-261115/zones/asia-northeast1-b, canIpForward=false, networkInterfaces=[{network=https://www.googleapis.com/compute/v1/projects/bosh-261115/global/networks/default, subnetwork=https://www.googleapis.com/compute/v1/projects/bosh-261115/regions/asia-northeast1/subnetworks/default, networkIP=10.146.0.9, name=nic0, accessConfigs=[{type=ONE_TO_ONE_NAT, name=External NAT, natIP=34.84.177.120, networkTier=PREMIUM, kind=compute#accessConfig}], fingerprint=SP6UdCpswNs=, kind=compute#networkInterface}], disks=[{type=PERSISTENT, mode=READ_WRITE, source=https://www.googleapis.com/compute/v1/projects/bosh-261115/zones/asia-northeast1-b/disks/starlabs, deviceName=starlabs, index=0, boot=true, autoDelete=true, licenses=[https://www.googleapis.com/compute/v1/projects/debian-cloud/global/licenses/debian-9-stretch], interface=SCSI, guestOsFeatures=[{type=VIRTIO_SCSI_MULTIQUEUE}], diskSizeGb=10, kind=compute#attachedDisk}], metadata={fingerprint=EmZUPslKqBA=, kind=compute#metadata}, serviceAccounts=[{email=557741835606-compute@developer.gserviceaccount.com, scopes=[https://www.googleapis.com/auth/devstorage.read_only, https://www.googleapis.com/auth/logging.write, https://www.googleapis.com/auth/monitoring.write, https://www.googleapis.com/auth/servicecontrol, https://www.googleapis.com/auth/service.management.readonly, https://www.googleapis.com/auth/trace.append]}], selfLink=https://www.googleapis.com/compute/v1/projects/bosh-261115/zones/asia-northeast1-b/instances/starlabs, scheduling={onHostMaintenance=MIGRATE, automaticRestart=true, preemptible=false}, cpuPlatform=Intel Broadwell, labelFingerprint=42WmSpB8rSM=, startRestricted=false, deletionProtection=false, reservationAffinity={consumeReservationType=ANY_RESERVATION}, displayDevice={enableDisplay=false}, kind=compute#instance}]


인스턴스 on/off 시 오류페이지 처리 해결

에러 예외처리가 없음. 어떤 에러인지 로그를 찍어서 확인해보자.
